{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1. Python","provenance":[],"collapsed_sections":["-iUpMlIc63WY","TPwsZCNnCNXs","NoiH-g4kFEE5","7Y8d3dU2Q9Wx","P8EPLGWza3nP","crGkJ4E_wUfJ","dcG0OuHe6Jd1","JNqyvWxxdre6","knx2DDj3M-mV","b72D6mO8RuUA","-GBuk0b9WFWy","z7UxCVZ4f608","M2lbaErBofes"],"authorship_tag":"ABX9TyNe4WRUgblFwZknAbKAMcZU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"qsqO8FQxx2WQ"},"source":["#**Learning Python**\n","---\n","Python can be easy to pick up whether you're a first time programmer or you're experienced with other languages. The following pages are a useful first step to get on your way writing programs with Python\n","\n","The community hosts conferences and meetups, collaborates on code, and much more. Python's documentation will help you along the way, and the mailing lists will keep you in touch.\n","\n","Python is developed under an OSI-approved open source license, making it freely usable and distributable, even for commercial use. Python's license is administered by the Python Software Foundation."]},{"cell_type":"markdown","metadata":{"id":"-iUpMlIc63WY"},"source":["### **1-Numbers**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MIUGB1KG4bYi","executionInfo":{"status":"ok","timestamp":1645152750614,"user_tz":-330,"elapsed":783,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"d9b25d7b-84fb-4004-e072-7a1ab60ed7a7"},"source":["1+2"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"shxsjah3APTD","executionInfo":{"status":"ok","timestamp":1645152750615,"user_tz":-330,"elapsed":69,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"9649438e-bf24-4152-f772-be79a780a2d9"},"source":["3*4"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TdtmrufpA3ph","executionInfo":{"status":"ok","timestamp":1645152750617,"user_tz":-330,"elapsed":65,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"67da54ce-a6cf-43ea-9ec5-e3204f17762e"},"source":["#Checking DataType\n","type(1)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["int"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"13vs-wSbBMlM","executionInfo":{"status":"ok","timestamp":1645152750618,"user_tz":-330,"elapsed":61,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"dc259bdd-5e42-47a4-daf6-142fa2f3ffbf"},"source":["type(\"Hello\")"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"TPwsZCNnCNXs"},"source":["### **2-Strings**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"MFSk66z5E3UI","executionInfo":{"status":"ok","timestamp":1645152750620,"user_tz":-330,"elapsed":58,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"1ff42600-d7cc-466f-8e83-bb43b0095278"},"source":["'Subham Das'"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Subham Das'"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"NoiH-g4kFEE5"},"source":["### **3-Variable Assignment**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WN4pGZXEFbTX","executionInfo":{"status":"ok","timestamp":1645152750621,"user_tz":-330,"elapsed":56,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"71de9f9f-9a58-4758-b9c1-d264d2c7fe7f"},"source":["a=\"Subham Das\"\n","type(a)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"ojqD4jEpG7xX"},"source":["#### **Print Formatting**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1CENs578HfLU","executionInfo":{"status":"ok","timestamp":1645152750623,"user_tz":-330,"elapsed":55,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"81204c54-1eee-495a-edb8-96d1c9cc942a"},"source":["first=\"Subham\"\n","last=\"Das\"\n","print(f\"My First Name is {first} AND Last Name is {last}\")"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["My First Name is Subham AND Last Name is Das\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RonrxK5wJesX","executionInfo":{"status":"ok","timestamp":1645152750624,"user_tz":-330,"elapsed":55,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"abc87ef0-1c5d-47c7-952d-1820b08a1a83"},"source":["len(\"Subham Das\")"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"7Y8d3dU2Q9Wx"},"source":["### **4-Boolean**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"98-WKdMYSEc4","executionInfo":{"status":"ok","timestamp":1645152750626,"user_tz":-330,"elapsed":56,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"7ed96719-a552-4bd6-cc86-603364028845"},"source":["type(True)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["bool"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b2u5DmCgSjQx","executionInfo":{"status":"ok","timestamp":1645152750627,"user_tz":-330,"elapsed":56,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"48a60f35-3a2c-4e30-e990-f48c4db53118"},"source":["name='Subham Das'\n","print(name.isalnum())#Checks if ALL characters are Numbers\n","print(name.isalpha())#Checks if ALL characters are Alphabets\n","print(name.isdigit())#Checks if ALL characters are Digits\n","print(name.isupper())#Checks if ALL characters are in upper case\n","print(name.islower())#Checks if ALL characters are in lower case\n","print(name.isspace())#Checks if ALL characters contains Spaces\n","print(name.startswith(\"S\"))\n","print(name.endswith(\"s\"))"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","False\n","False\n","False\n","False\n","False\n","True\n","True\n"]}]},{"cell_type":"markdown","metadata":{"id":"44JuZkZ7YWqG"},"source":["#### **Boolean and Logical Operators**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TPDW2oujY2GW","executionInfo":{"status":"ok","timestamp":1645152750628,"user_tz":-330,"elapsed":56,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"cc44e001-2af0-420b-c673-f3e81b43327c"},"source":["True and False"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0nHWPY1uZDsB","executionInfo":{"status":"ok","timestamp":1645152750629,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"bfca5fa8-0439-49ef-b66e-733cfa9db853"},"source":["True or False"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"P8EPLGWza3nP"},"source":["### **5-List**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KElPxr4rdUSi","executionInfo":{"status":"ok","timestamp":1645152750630,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"b6b1d1c7-ea9f-48bd-9969-3453cf8f44c7"},"source":["lst=list()\n","lst1=['Math','Physics','Chemistry',100,200,300]\n","type(lst)\n","type(lst1)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XTPhaNMLfFC1","executionInfo":{"status":"ok","timestamp":1645152750631,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"d248b60f-af58-4de4-9332-b2382a910223"},"source":["len(lst1)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"lTshx2-bhkRk","executionInfo":{"status":"ok","timestamp":1645152750632,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"e011adf2-b1ad-477f-eb68-4142a9d482cd"},"source":["lst1[2]"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Chemistry'"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EwXfxVMLiQ1H","executionInfo":{"status":"ok","timestamp":1645152750632,"user_tz":-330,"elapsed":53,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"ba14e71a-e563-4268-f497-56b5314a7a22"},"source":["lst1[2:-1]"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Chemistry', 100, 200]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j0mB3TdRiExB","executionInfo":{"status":"ok","timestamp":1645152750633,"user_tz":-330,"elapsed":53,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"9ce09f89-ca9c-43b9-d6e8-4057311b2139"},"source":["lst1[2:6]"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Chemistry', 100, 200, 300]"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"B5JGvClCeeUV"},"source":["#### ***Append***"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cz_YxMZhflWa","executionInfo":{"status":"ok","timestamp":1645152750634,"user_tz":-330,"elapsed":53,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"158de20f-703a-455a-8d26-384b92d9eab4"},"source":["lst1.append(\"Subham\")\n","lst1"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Math', 'Physics', 'Chemistry', 100, 200, 300, 'Subham']"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0pPEHwkljuwx","executionInfo":{"status":"ok","timestamp":1645152750635,"user_tz":-330,"elapsed":53,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"900b63b4-3e54-460d-a898-194eddd158b6"},"source":["#Appending List within a List\n","lst1.append(['Ma','Baba'])\n","lst1"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Math', 'Physics', 'Chemistry', 100, 200, 300, 'Subham', ['Ma', 'Baba']]"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"8z5R2H4jgDUW"},"source":["#### ***Insert***"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_Ntg-jhgWSJ","executionInfo":{"status":"ok","timestamp":1645152750636,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"93216228-b17a-435e-c3fe-0e1acecdff8b"},"source":["#Insert at a secific position\n","lst1.insert(1,'Das')\n","lst1"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Math',\n"," 'Das',\n"," 'Physics',\n"," 'Chemistry',\n"," 100,\n"," 200,\n"," 300,\n"," 'Subham',\n"," ['Ma', 'Baba']]"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"Ybb3zaTMoRPa"},"source":["#### ***Extend***"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6T1jpqbwocbG","executionInfo":{"status":"ok","timestamp":1645152750639,"user_tz":-330,"elapsed":56,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"cd183d7a-7295-4523-c219-c73fe52afd72"},"source":["lst1.extend([1,3])\n","lst1"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Math',\n"," 'Das',\n"," 'Physics',\n"," 'Chemistry',\n"," 100,\n"," 200,\n"," 300,\n"," 'Subham',\n"," ['Ma', 'Baba'],\n"," 1,\n"," 3]"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"YjNHeOPqpBsd"},"source":["#### **Various Operations on a List**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qfTabvv0pm_0","executionInfo":{"status":"ok","timestamp":1645152750643,"user_tz":-330,"elapsed":59,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"1f882af8-b253-46f2-eb94-00eb98328fbf"},"source":["lst2=[2,3,4,5,6]\n","sum(lst2)"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GfN4Z17Kq0MT","executionInfo":{"status":"ok","timestamp":1645152750644,"user_tz":-330,"elapsed":60,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"4a948d6b-ccd6-4e09-da3a-74fe0cd1c5f2"},"source":["lst2.pop(-2)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OyrB-VWWsc_n","executionInfo":{"status":"ok","timestamp":1645152750645,"user_tz":-330,"elapsed":60,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"547e76ac-44f3-4623-a1a6-a9e735331a2b"},"source":["lst2.count(1)"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQZleg1ftVVp","executionInfo":{"status":"ok","timestamp":1645152750647,"user_tz":-330,"elapsed":61,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"4a2f7aa3-dbe1-4441-b8dc-da4c599e36b9"},"source":["lst2.index(2)"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sRoCd1E1uaXC","executionInfo":{"status":"ok","timestamp":1645152750648,"user_tz":-330,"elapsed":61,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"6249453c-744c-4836-a415-a7a324bb1437"},"source":["#List gets repeated 3 times\n","lst2*3"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6]"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"crGkJ4E_wUfJ"},"source":["### **6-Sets**\n","\n","A Set is an unordered collection data type that is iterable, mutable and has no duplicate elements. Python’s set class represents the mathematical notion of a set. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set. This is based on a data structure known as a hash table. Since sets are unordered, we cannot access items using indexes like we do in lists."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HEcFlGDtwdTr","executionInfo":{"status":"ok","timestamp":1645152750649,"user_tz":-330,"elapsed":62,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"e79d0c8e-faff-4eff-fe05-5ebd1b36cccd"},"source":["set={'Avenger','Hitman','Ironman'}\n","type(set)"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["set"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-rpL2m4yHIZ","executionInfo":{"status":"ok","timestamp":1645152750649,"user_tz":-330,"elapsed":61,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"74e434af-a5ce-40de-c9ef-24884348ccb6"},"source":["num={1,2,3,2,3}\n","num"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1, 2, 3}"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X0gYOSEZyTQU","executionInfo":{"status":"ok","timestamp":1645152750650,"user_tz":-330,"elapsed":61,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"812ea176-47aa-460c-e8fa-e54c62febf83"},"source":["num.add(5)\n","num"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1, 2, 3, 5}"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zIZF9tvsz_ma","executionInfo":{"status":"ok","timestamp":1645152750655,"user_tz":-330,"elapsed":65,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"425fbe04-f903-4b3f-a388-822014601a9f"},"source":["num1={1,2,3}\n","num.difference(num1)"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{5}"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7HPvI7ho00Ss","executionInfo":{"status":"ok","timestamp":1645152750658,"user_tz":-330,"elapsed":67,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"d79adcaa-ee99-4e23-ad46-f8226390aef1"},"source":["num1.intersection(num)"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1, 2, 3}"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dm9B1MqP14tP","executionInfo":{"status":"ok","timestamp":1645152750660,"user_tz":-330,"elapsed":68,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"1f1f6440-bfbe-41b1-8544-44e3e902eb29"},"source":["dic={'Car1':'Audi','Car2':\"BMW\",'Car3':'Kia'}\n","type(dic)"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"dcG0OuHe6Jd1"},"source":["### **7-Dictionaries**\n","\n","Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key:value pair. Key value is provided in the dictionary to make it more optimized.\n","\n","Note – Keys in a dictionary doesn’t allows Polymorphism."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCUDH2Z-6ocK","executionInfo":{"status":"ok","timestamp":1645152750660,"user_tz":-330,"elapsed":68,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"a3c6675e-ebf1-409b-dcbe-7a576a287bef"},"source":["dic={'Car1':'Audi','Car2':'BMW','Car3':'Kia'}\n","type(dic)"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"0BFe9PBP8yk_","executionInfo":{"status":"ok","timestamp":1645152750661,"user_tz":-330,"elapsed":68,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"d5332146-8d70-43e0-db89-9fdb7e7f8b57"},"source":["#Access items by keys\n","dic['Car2']"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'BMW'"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oHwHmjLQ9sEx","executionInfo":{"status":"ok","timestamp":1645152750661,"user_tz":-330,"elapsed":67,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"0e337202-2b11-42ca-c1f5-bbc80af2c066"},"source":["for x in dic:\n","  print(x)"],"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Car1\n","Car2\n","Car3\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6OVFrFde-VDw","executionInfo":{"status":"ok","timestamp":1645152750661,"user_tz":-330,"elapsed":66,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"63dd81c1-00e1-468d-88f6-8af100979d34"},"source":["print(dic.values())"],"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_values(['Audi', 'BMW', 'Kia'])\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c6iyvkGm_Cc_","executionInfo":{"status":"ok","timestamp":1645152751183,"user_tz":-330,"elapsed":57,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"158d988f-ac5c-48ff-a356-5af02e1ce00c"},"source":["dic.items()"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_items([('Car1', 'Audi'), ('Car2', 'BMW'), ('Car3', 'Kia')])"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k0Kf0DYK_gJ8","executionInfo":{"status":"ok","timestamp":1645152751184,"user_tz":-330,"elapsed":54,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"8c58fe3d-7af3-4a4a-9d47-1781ad862e0b"},"source":["dic['Car4']='Merc'\n","dic"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Car1': 'Audi', 'Car2': 'BMW', 'Car3': 'Kia', 'Car4': 'Merc'}"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mnv3n2YbBQMU","executionInfo":{"status":"ok","timestamp":1645152751185,"user_tz":-330,"elapsed":53,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"10430e38-9389-4d21-fdce-28676c43be01"},"source":["dic['Car1']='Maruti'\n","dic"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Car1': 'Maruti', 'Car2': 'BMW', 'Car3': 'Kia', 'Car4': 'Merc'}"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"APERnmWq_-MF"},"source":["#### **Nested Dictionaries**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OhMfylXeAMUE","executionInfo":{"status":"ok","timestamp":1645152751186,"user_tz":-330,"elapsed":52,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"27744be9-514f-4858-9508-bcd0093780d1"},"source":["p1={'fname':'Subham','lname':'das','dob':'28/05/1985'}\n","p2={'fname':'Dhruba','lname':'das','dob':'07/09/1990'}\n","family={'person1':p1,'person2':p2}\n","family"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'person1': {'dob': '28/05/1985', 'fname': 'Subham', 'lname': 'das'},\n"," 'person2': {'dob': '07/09/1990', 'fname': 'Dhruba', 'lname': 'das'}}"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"N8z3euuzbKkd","executionInfo":{"status":"ok","timestamp":1645152751187,"user_tz":-330,"elapsed":52,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"0cc5dff1-e38d-4a0b-ef7c-291fcb978632"},"source":["family['person2']['fname']"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Dhruba'"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"JNqyvWxxdre6"},"source":["###**8-Tuples**\n","\n","A Tuple is a collection of Python objects separated by commas. In someways a tuple is similar to a list in terms of indexing, nested objects and repetition but a tuple is immutable unlike lists which are mutable."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dhYhxxid5tF","executionInfo":{"status":"ok","timestamp":1645152751188,"user_tz":-330,"elapsed":51,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"1a48a43a-515b-4305-8771-69632ef96370"},"source":["tuple=('Subham','Dhruba','Ma','Baba','Subham')\n","type(tuple)"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tuple"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"kShLUvYkf3JM","executionInfo":{"status":"ok","timestamp":1645152751189,"user_tz":-330,"elapsed":50,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"bd6659c3-86de-4604-a222-80097ffa4593"},"source":["tuple[0]"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Subham'"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PpjrKbAageka","executionInfo":{"status":"ok","timestamp":1645152751190,"user_tz":-330,"elapsed":50,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"358269f1-b534-466b-fd6e-9932661c1b86"},"source":["tuple.count('Subham')"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4-LMlDpgrGO","executionInfo":{"status":"ok","timestamp":1645152751191,"user_tz":-330,"elapsed":49,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"51915541-7f2c-429c-8cbc-9227b446706b"},"source":["tuple.index('Subham')"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"knx2DDj3M-mV"},"source":["### **9-Python Function**\n","\n","A function is a block of code which only runs when it is called.\n","\n","You can pass data, known as parameters, into a function.\n","\n","A function can return data as a result."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IU-plAW9NH-5","executionInfo":{"status":"ok","timestamp":1645152751191,"user_tz":-330,"elapsed":48,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"fc74d31f-5670-4d81-b6a2-149a3217e6f7"},"source":["def odd_even(num):\n","  if num%2==0:\n","    print(\"The number is EVEN\")\n","  else:\n","    print(\"The number is ODD\")\n","\n","odd_even(25)\n"],"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["The number is ODD\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2y2EWauYJlUs","executionInfo":{"status":"ok","timestamp":1645152751192,"user_tz":-330,"elapsed":48,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"9f31dce7-4d31-4f9f-e45c-7820cf423ba8"},"source":["#Defining a default value in a function\n","def hello(name,age=35):\n","  print(f\"My name is {name} and age is {age}\")\n","hello('Subham',30)"],"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["My name is Subham and age is 30\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c514Tbq5H-hb","executionInfo":{"status":"ok","timestamp":1645152751193,"user_tz":-330,"elapsed":47,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"6745fce4-4177-433a-aba9-f573ffd1451f"},"source":["# *args is used to define any positional argument\n","# **kwargs is used to define any keyword argument\n","\n","def hello(*args,**kwargs):\n","  print(args)\n","  print(kwargs)\n","\n","print( hello(\"Subham\",\"Das\",age=35,dob=1985))"],"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["('Subham', 'Das')\n","{'age': 35, 'dob': 1985}\n","None\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TfvmfsZ-PhSk","executionInfo":{"status":"ok","timestamp":1645152751195,"user_tz":-330,"elapsed":48,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"2560d4fe-a7e4-4e35-e5bb-625322a3316b"},"source":["lst=['Subham', 'Das']\n","dict_arg={'age': 35, 'dob': 1985}\n","print(hello(*lst,**dict_arg))"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["('Subham', 'Das')\n","{'age': 35, 'dob': 1985}\n","None\n"]}]},{"cell_type":"markdown","metadata":{"id":"b72D6mO8RuUA"},"source":["###**10-Lambda Functions**\n","\n","In Python, an anonymous function means that a function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python. It has the following syntax: \n","\n","*Syntax: lambda arguments: expression*\n","\n","This function can have any number of arguments but only one expression, which is evaluated and returned.\n","One is free to use lambda functions wherever function objects are required.\n","You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression.\n","It has various uses in particular fields of programming besides other types of expressions in functions."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t1qyie2dR6d2","executionInfo":{"status":"ok","timestamp":1645152751196,"user_tz":-330,"elapsed":48,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"7e87407d-2d41-4d0e-d803-ed75baae9b40"},"source":["add=lambda a,b:a+b\n","\n","add(1,2)"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p3DlZl7yUEN9","executionInfo":{"status":"ok","timestamp":1645152751197,"user_tz":-330,"elapsed":47,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"76d69681-f6f6-4618-ad41-eb308b93f882"},"source":["even=lambda x:x%2==0\n","\n","even(13)"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BQ3-siNjUsV0","executionInfo":{"status":"ok","timestamp":1645152751198,"user_tz":-330,"elapsed":42,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"db35d555-401d-4bce-acd5-4a14492ec432"},"source":["add1=lambda x,y,z:x+y+z\n","\n","add1(3,4,5)"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"R5EXtJ2iVhxh","executionInfo":{"status":"ok","timestamp":1645152751199,"user_tz":-330,"elapsed":40,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}}},"source":[""],"execution_count":52,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-GBuk0b9WFWy"},"source":["###**11-Map Functions**\n","\n","map() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)\n","\n","*Syntax :map(fun, iter)*\n","\n","Parameters :\n","\n","**function** : It is a function to which map passes each element of given iterable.\n","\n","**iter** : It is a iterable which is to be mapped."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6jgxzlYJW_oL","executionInfo":{"status":"ok","timestamp":1645153323122,"user_tz":-330,"elapsed":668,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"7599892a-8e7f-44e2-fb07-7f4b91447ca7"},"source":["lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","def even (num):\n","  if num%2==0:\n","    return f\"{num} is EVEN\"\n","  else:\n","      return f\"{num} is ODD\"\n","\n","\n","list(map(even,lst))"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['1 is ODD',\n"," '2 is EVEN',\n"," '3 is ODD',\n"," '4 is EVEN',\n"," '5 is ODD',\n"," '6 is EVEN',\n"," '7 is ODD',\n"," '8 is EVEN',\n"," '9 is ODD',\n"," '10 is EVEN',\n"," '11 is ODD',\n"," '12 is EVEN',\n"," '13 is ODD',\n"," '14 is EVEN',\n"," '15 is ODD',\n"," '16 is EVEN',\n"," '17 is ODD',\n"," '18 is EVEN',\n"," '19 is ODD',\n"," '20 is EVEN']"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"z7UxCVZ4f608"},"source":["###**12-Filter Functions**\n","\n","The filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.\n","\n","*syntax:filter(function, sequence)*\n","\n","Parameters:\n","\n","**function**: function that tests if each element of a \n","sequence true or not.\n","\n","**sequence**: sequence which needs to be filtered, it can \n","be sets, lists, tuples, or containers of any iterators.\n","Returns:\n","returns an iterator that is already filtered."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-JOXgfKsclue","executionInfo":{"status":"ok","timestamp":1645153100840,"user_tz":-330,"elapsed":523,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"8630fddc-0aac-464a-fbe7-fba6a4f1544c"},"source":["lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","def even (num):\n","  if num%2==0:\n","    return True\n","\n","list(filter(even,lst))"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KpY4b2NeiPp7","executionInfo":{"status":"ok","timestamp":1645153110921,"user_tz":-330,"elapsed":716,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"a70385f1-4176-4961-fa3c-ecadda4a0425"},"source":["lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","\n","list(filter(lambda num:num%2==0,lst))"],"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","source":["###**13-FILTER, MAP & LAMBDA**"],"metadata":{"id":"3uXb6opsubFy"}},{"cell_type":"code","source":["list(filter(lambda num:num%2==0, lst) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V2NGGoKmvNKn","executionInfo":{"status":"ok","timestamp":1645153352288,"user_tz":-330,"elapsed":524,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"2eb31b5b-880e-4312-dbc5-395d22141da0"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["list(map(lambda num:num%2==0, lst) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cB_pckoKvZf3","executionInfo":{"status":"ok","timestamp":1645153375441,"user_tz":-330,"elapsed":529,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"1aa2dd95-b6b1-475d-c0c5-5e0ae16f444f"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True,\n"," False,\n"," True]"]},"metadata":{},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"M2lbaErBofes"},"source":["###**14-Comprehension**\n","\n","\n","Comprehensions in Python provide us with a short and concise way to construct new sequences (such as lists, set, dictionary etc.) using sequences which have been already defined. Python supports the following 4 types of comprehensions:\n","\n","* List Comprehensions\n","* Dictionary Comprehensions\n","* Set Comprehensions\n","* Generator Comprehensions\n","\n","**List Comprehensions**:\n","\n","List Comprehensions provide an elegant way to create new lists. The following is the basic structure of a list comprehension:\n","\n","output_list = [output_exp for var in input_list if (var satisfies this condition)]\n","\n","Note that list comprehension may or may not contain an if condition. List comprehensions can contain multiple for (nested list comprehensions).\n","\n","**Dictionary Comprehensions:**\n","\n","Extending the idea of list comprehensions, we can also create a dictionary using dictionary comprehensions. \n","\n","**Set Comprehensions:**\n","\n","Set comprehensions are pretty similar to list comprehensions. The only difference between them is that set comprehensions use curly brackets { }\n","\n","**Generator Comprehensions:**\n","\n","Generator Comprehensions are very similar to list comprehensions. One difference between them is that generator comprehensions use circular brackets whereas list comprehensions use square brackets. The major difference between them is that generators don’t allocate memory for the whole list. Instead, they generate each value one by one which is why they are memory efficient. \n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4oF35-Q9o2IB","executionInfo":{"status":"ok","timestamp":1645153426446,"user_tz":-330,"elapsed":548,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"d519aca1-8af5-4dec-a315-df9d62916bd7"},"source":["#List Comprehension\n","lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","[x**2 for x in lst]"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 4,\n"," 9,\n"," 16,\n"," 25,\n"," 36,\n"," 49,\n"," 64,\n"," 81,\n"," 100,\n"," 121,\n"," 144,\n"," 169,\n"," 196,\n"," 225,\n"," 256,\n"," 289,\n"," 324,\n"," 361,\n"," 400]"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s3vZwRX7pIlT","executionInfo":{"status":"ok","timestamp":1645153433096,"user_tz":-330,"elapsed":525,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"54469611-98b0-46be-8c0e-2d08f1a407b6"},"source":["#Dictionary Comprehension using numbers\n","lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","{x:x**2 for x in lst}"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1: 1,\n"," 2: 4,\n"," 3: 9,\n"," 4: 16,\n"," 5: 25,\n"," 6: 36,\n"," 7: 49,\n"," 8: 64,\n"," 9: 81,\n"," 10: 100,\n"," 11: 121,\n"," 12: 144,\n"," 13: 169,\n"," 14: 196,\n"," 15: 225,\n"," 16: 256,\n"," 17: 289,\n"," 18: 324,\n"," 19: 361,\n"," 20: 400}"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o6djnrq0swKK","executionInfo":{"status":"ok","timestamp":1645153440258,"user_tz":-330,"elapsed":517,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"6cb403ee-2aec-49fb-8b75-060bb9a8b196"},"source":["#Dictionary Comprehension using Strings\n","state = ['Gujarat', 'Maharashtra', 'Rajasthan'] \n","capital = ['Gandhinagar', 'Mumbai', 'Jaipur'] \n","{key:value for (key, value) in zip(state, capital)} "],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Gujarat': 'Gandhinagar', 'Maharashtra': 'Mumbai', 'Rajasthan': 'Jaipur'}"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L04PjYMFub9T","executionInfo":{"status":"ok","timestamp":1645153445480,"user_tz":-330,"elapsed":562,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"c3fe1be1-d79a-420c-c7d5-bd4b3fd14d12"},"source":["#Set Comprehension\n","lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","{x**2 for x in lst}"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1,\n"," 4,\n"," 9,\n"," 16,\n"," 25,\n"," 36,\n"," 49,\n"," 64,\n"," 81,\n"," 100,\n"," 121,\n"," 144,\n"," 169,\n"," 196,\n"," 225,\n"," 256,\n"," 289,\n"," 324,\n"," 361,\n"," 400}"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hWZsDuyfv4d1","executionInfo":{"status":"ok","timestamp":1645153450379,"user_tz":-330,"elapsed":539,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"3ab31dc2-11b3-46a5-de51-771360da1bed"},"source":["#Generator Comprehension\n","lst=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n","list((x**2 for x in lst))"],"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1,\n"," 4,\n"," 9,\n"," 16,\n"," 25,\n"," 36,\n"," 49,\n"," 64,\n"," 81,\n"," 100,\n"," 121,\n"," 144,\n"," 169,\n"," 196,\n"," 225,\n"," 256,\n"," 289,\n"," 324,\n"," 361,\n"," 400]"]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","metadata":{"id":"ym6mf9mK09nj"},"source":["###**15-String Formatting**\n","\n","str.format() is one of the string formatting methods in Python3, which allows multiple substitutions and value formatting. This method lets us concatenate elements within a string through positional formatting.\n","\n","**Using a Single Formatter :**\n","\n","Formatters work by putting in one or more replacement fields and placeholders defined by a pair of curly braces { } into a string and calling the str.format(). The value we wish to put into the placeholders and concatenate with the string passed as parameters into the format function.\n","\n","*Syntax : { } .format(value)*\n","\n","Parameters :\n","(value) : Can be an integer, floating point numeric constant, string, characters or even variables.\n","\n","Returntype : Returns a formatted string with the value passed as parameter in the placeholder position.\n","\n","**Using Multiple Formatters :**\n","\n","Multiple pairs of curly braces can be used while formatting the string. Let’s say if another variable substitution is needed in sentence, can be done by adding a second pair of curly braces and passing a second value into the method. Python will replace the placeholders by values in order.\n","\n","*Syntax : { } { } .format(value1, value2)*\n","\n","Parameters :\n","(value1, value2) : Can be integers, floating point numeric constants, strings, characters and even variables. Only difference is, the number of values passed as parameters in format() method must be equal to the number of placeholders created in the string."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YgI4P6fS1FIh","executionInfo":{"status":"ok","timestamp":1645153487828,"user_tz":-330,"elapsed":506,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"f8d000fb-8076-4644-e256-413bfd67ff53"},"source":["def greet(name,age):\n","  print(\"{} is {} years old\".format(name,age))\n","\n","greet(\"Baba\",70)"],"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Baba is 70 years old\n"]}]},{"cell_type":"markdown","metadata":{"id":"96z6LzIm-KL2"},"source":["###**16-Iterables vs Iterators**\n","\n","Iterable is an object, which one can iterate over. It generates an Iterator when passed to iter() method. Iterator is an object, which is used to iterate over an iterable object using __next__() method. Iterators have __next__() method, which returns the next item of the object.\n","\n","Note that every iterator is also an iterable, but not every iterable is an iterator. For example, a list is iterable but a list is not an iterator. An iterator can be created from an iterable by using the function iter(). To make this possible, the class of an object needs either a method __iter__, which returns an iterator, or a __getitem__ method with sequential indexes starting with 0."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XiTzwmN6EUAM","executionInfo":{"status":"ok","timestamp":1645153517055,"user_tz":-330,"elapsed":522,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"f6517914-2612-4940-a860-c1549320f973"},"source":["list=[1,2,3,4,5]\n","#next iterate through the list till the last element when it gives error\n","list1=iter(list)\n","next(list1)"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"CPu5FWy-_t0c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645153523958,"user_tz":-330,"elapsed":519,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"01706238-806d-4cf2-da43-4a4f46acfd18"},"source":["for city in [\"Berlin\", \"Vienna\", \"Zurich\"]: \n","\tprint(city) "],"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Berlin\n","Vienna\n","Zurich\n"]}]},{"cell_type":"code","metadata":{"id":"0GFthFt6_0bS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645153528942,"user_tz":-330,"elapsed":509,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"4f1f2811-a0fa-4e5b-efb9-e494d1ad90cb"},"source":["# list of cities \n","cities = [\"Berlin\", \"Vienna\", \"Zurich\"] \n","\n","# initialize the object \n","iterator_obj = iter(cities) \n","\n","print(next(iterator_obj)) \n","print(next(iterator_obj)) \n","print(next(iterator_obj)) \n"],"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Berlin\n","Vienna\n","Zurich\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BSjummP0Ay4h","executionInfo":{"status":"ok","timestamp":1645153534671,"user_tz":-330,"elapsed":496,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"aab160f1-92ed-4540-eb82-f1b630ffa69b"},"source":["# Function to check object \n","# is iterable or not \n","def iterable(obj): \n","\ttry: \n","\t\titer(obj) \n","\t\treturn True\n","\t\t\n","\texcept TypeError: \n","\t\treturn False\n","\n","# Driver Code\t \n","for element in [34, [4, 5], (4, 5), \n","\t\t\t{\"a\":4}, \"dfsdf\", 4.5]: \n","\t\t\t\t\n","\tprint(element, \" is iterable : \", iterable(element)) \n","\n"],"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["34  is iterable :  False\n","[4, 5]  is iterable :  True\n","(4, 5)  is iterable :  True\n","{'a': 4}  is iterable :  True\n","dfsdf  is iterable :  True\n","4.5  is iterable :  False\n"]}]},{"cell_type":"markdown","metadata":{"id":"w66EeLvkKB-p"},"source":["###**17-Classes, Variables, Methods and Objects**\n","\n","**Classes**\n","\n","A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.\n","\n","To understand the need for creating a class let’s consider an example, let’s say you wanted to track the number of dogs which may have different attributes like breed, age. If a list is used, the first element could be the dog’s breed while the second element could represent its age. Let’s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What if you wanted to add other properties to these dogs? This lacks organization and it’s the exact need for classes.\n","\n","Class creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object.\n","\n","**Class Objects**\n","\n","An Object is an instance of a Class. A class is like a blueprint while an instance is a copy of the class with actual values. It’s not an idea anymore, it’s an actual dog, like a dog of breed pug who’s seven years old. You can have many dogs to create many different instances, but without the class as a guide, you would be lost, not knowing what information is required.\n","\n","An object consists of :\n","\n","**State :** It is represented by attributes of an object. It also reflects the properties of an object.\n","**Behavior :** It is represented by methods of an object. It also reflects the response of an object with other objects.\n","**Identity :** It gives a unique name to an object and enables one object to interact with other objects.\n","\n","**Class Method**\n","\n","The @classmethod decorator, is a builtin function decorator that is an expression that gets evaluated after your function is defined. The result of that evaluation shadows your function definition.\n","A class method receives the class as implicit first argument, just like an instance method receives the instance\n","Syntax:\n","\n","class C(object):\n","    @classmethod\n","    def fun(cls, arg1, arg2, ...):\n","       ....\n","fun: function that needs to be converted into a class method\n","returns: a class method for function.\n","A class method is a method which is bound to the class and not the object of the class.\n","They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.\n","It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.\n","Static Method\n","\n","A static method does not receive an implicit first argument.\n","Syntax:\n","\n","class C(object):\n","    @staticmethod\n","    def fun(arg1, arg2, ...):\n","        ...\n","returns: a static method for function fun.\n","A static method is also a method which is bound to the class and not the object of the class.\n","A static method can’t access or modify class state.\n","It is present in a class because it makes sense for the method to be present in class.\n","Class method vs Static Method\n","\n","\n","\n","\n","A class method takes cls as first parameter while a static method needs no specific parameters.\n","A class method can access or modify class state while a static method can’t access or modify it.\n","In general, static methods know nothing about class state. They are utility type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as parameter.\n","We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.\n","When to use what?\n","\n","We generally use class method to create factory methods. Factory methods return class object ( similar to a constructor ) for different use cases.\n","We generally use static methods to create utility functions.\n","How to define a class method and a static method?\n","\n","To define a class method in python, we use @classmethod decorator and to define a static method we use @staticmethod decorator.\n","Let us look at an example to understand the difference between both of them. Let us say we want to create a class Person. Now, python doesn’t support method overloading like C++ or Java so we use class methods to create factory methods. In the below example we use a class method to create a person object from birth year.\n","\n","As explained above we use static methods to create utility functions. In the below example we use a static method to check if a person is adult or not."]},{"cell_type":"code","metadata":{"id":"O-6zuA06KYOw","executionInfo":{"status":"ok","timestamp":1645153578564,"user_tz":-330,"elapsed":498,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}}},"source":["#Creating a class\n","class Car:\n","  pass\n","  def __init__(self,door,window,enginetype):\n","    self.doors=door\n","    self.window=window\n","    self.enginetype=enginetype\n","\n","  def self_driving(self):\n","    return f\"This is a {self.enginetype} car\"\n"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"id":"7OwL-CrKVcP2","executionInfo":{"status":"ok","timestamp":1645153584116,"user_tz":-330,"elapsed":704,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}}},"source":["#Instantiating an object of the class\n","merc=Car(4,5,\"Deisel\")\n","ambassador=Car(2,3,\"Petrol\")"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O4HWkHFBWQeq","executionInfo":{"status":"ok","timestamp":1645153590033,"user_tz":-330,"elapsed":491,"user":{"displayName":"P Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiivRxUn0xCMXNGJkj2o256u90kTZpBV2gsAHCK=s64","userId":"08759630486056956439"}},"outputId":"e27916cf-5217-427e-f6bf-e6b3685777e2"},"source":["print(ambassador.self_driving())"],"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a Petrol car\n"]}]}]}